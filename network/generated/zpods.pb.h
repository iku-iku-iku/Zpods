// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zpods.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_zpods_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_zpods_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/extension_set.h" // IWYU pragma: export
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/message.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/repeated_field.h" // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_zpods_2eproto

namespace google
{
namespace protobuf
{
namespace internal
{
class AnyMetadata;
} // namespace internal
} // namespace protobuf
} // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_zpods_2eproto
{
    static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_zpods_2eproto;
namespace zpods
{
class DownloadPodRequest;
struct DownloadPodRequestDefaultTypeInternal;
extern DownloadPodRequestDefaultTypeInternal
    _DownloadPodRequest_default_instance_;
class DownloadPodResponse;
struct DownloadPodResponseDefaultTypeInternal;
extern DownloadPodResponseDefaultTypeInternal
    _DownloadPodResponse_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class PodList;
struct PodListDefaultTypeInternal;
extern PodListDefaultTypeInternal _PodList_default_instance_;
class QueryPodsRequest;
struct QueryPodsRequestDefaultTypeInternal;
extern QueryPodsRequestDefaultTypeInternal _QueryPodsRequest_default_instance_;
class QueryPodsResponse;
struct QueryPodsResponseDefaultTypeInternal;
extern QueryPodsResponseDefaultTypeInternal
    _QueryPodsResponse_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
class RegisterResponse;
struct RegisterResponseDefaultTypeInternal;
extern RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;
class UploadPodRequest;
struct UploadPodRequestDefaultTypeInternal;
extern UploadPodRequestDefaultTypeInternal _UploadPodRequest_default_instance_;
class UploadStatus;
struct UploadStatusDefaultTypeInternal;
extern UploadStatusDefaultTypeInternal _UploadStatus_default_instance_;
} // namespace zpods
namespace google
{
namespace protobuf
{
} // namespace protobuf
} // namespace google

namespace zpods
{

// ===================================================================

// -------------------------------------------------------------------

class UploadStatus final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zpods.UploadStatus)
                                                               */
{
  public:
    inline UploadStatus() : UploadStatus(nullptr) {}
    ~UploadStatus() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR
        UploadStatus(::google::protobuf::internal::ConstantInitialized);

    inline UploadStatus(const UploadStatus& from) : UploadStatus(nullptr, from)
    {
    }
    UploadStatus(UploadStatus&& from) noexcept : UploadStatus()
    {
        *this = ::std::move(from);
    }

    inline UploadStatus& operator=(const UploadStatus& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline UploadStatus& operator=(UploadStatus&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet&
    unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet*
    mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const UploadStatus& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const UploadStatus* internal_default_instance()
    {
        return reinterpret_cast<const UploadStatus*>(
            &_UploadStatus_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;

    friend void swap(UploadStatus& a, UploadStatus& b) { a.Swap(&b); }
    inline void Swap(UploadStatus* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena())
        {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(UploadStatus* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    UploadStatus* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<UploadStatus>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const UploadStatus& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const UploadStatus& from)
    {
        UploadStatus::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::google::protobuf::Message& to_msg,
                          const ::google::protobuf::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
    ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(UploadStatus* other);

  private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "zpods.UploadStatus";
    }

  protected:
    explicit UploadStatus(::google::protobuf::Arena* arena);
    UploadStatus(::google::protobuf::Arena* arena, const UploadStatus& from);

  public:
    static const ClassData _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kSuccessFieldNumber = 1,
    };
    // bool success = 1;
    void clear_success();
    bool success() const;
    void set_success(bool value);

  private:
    bool _internal_success() const;
    void _internal_set_success(bool value);

  public:
    // @@protoc_insertion_point(class_scope:zpods.UploadStatus)
  private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from);
        bool success_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_zpods_2eproto;
}; // -------------------------------------------------------------------

class UploadPodRequest final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zpods.UploadPodRequest)
                                                                   */
{
  public:
    inline UploadPodRequest() : UploadPodRequest(nullptr) {}
    ~UploadPodRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR
        UploadPodRequest(::google::protobuf::internal::ConstantInitialized);

    inline UploadPodRequest(const UploadPodRequest& from)
        : UploadPodRequest(nullptr, from)
    {
    }
    UploadPodRequest(UploadPodRequest&& from) noexcept : UploadPodRequest()
    {
        *this = ::std::move(from);
    }

    inline UploadPodRequest& operator=(const UploadPodRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline UploadPodRequest& operator=(UploadPodRequest&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet&
    unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet*
    mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const UploadPodRequest& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const UploadPodRequest* internal_default_instance()
    {
        return reinterpret_cast<const UploadPodRequest*>(
            &_UploadPodRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    friend void swap(UploadPodRequest& a, UploadPodRequest& b) { a.Swap(&b); }
    inline void Swap(UploadPodRequest* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena())
        {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(UploadPodRequest* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    UploadPodRequest*
    New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<UploadPodRequest>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const UploadPodRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const UploadPodRequest& from)
    {
        UploadPodRequest::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::google::protobuf::Message& to_msg,
                          const ::google::protobuf::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
    ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(UploadPodRequest* other);

  private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "zpods.UploadPodRequest";
    }

  protected:
    explicit UploadPodRequest(::google::protobuf::Arena* arena);
    UploadPodRequest(::google::protobuf::Arena* arena,
                     const UploadPodRequest& from);

  public:
    static const ClassData _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kPodsNameFieldNumber = 1,
        kPodNameFieldNumber = 2,
        kTokenFieldNumber = 3,
        kContentFieldNumber = 4,
    };
    // string pods_name = 1;
    void clear_pods_name();
    const std::string& pods_name() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_pods_name(Arg_&& arg, Args_... args);
    std::string* mutable_pods_name();
    PROTOBUF_NODISCARD std::string* release_pods_name();
    void set_allocated_pods_name(std::string* value);

  private:
    const std::string& _internal_pods_name() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_pods_name(const std::string& value);
    std::string* _internal_mutable_pods_name();

  public:
    // string pod_name = 2;
    void clear_pod_name();
    const std::string& pod_name() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_pod_name(Arg_&& arg, Args_... args);
    std::string* mutable_pod_name();
    PROTOBUF_NODISCARD std::string* release_pod_name();
    void set_allocated_pod_name(std::string* value);

  private:
    const std::string& _internal_pod_name() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_pod_name(const std::string& value);
    std::string* _internal_mutable_pod_name();

  public:
    // string token = 3;
    void clear_token();
    const std::string& token() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_token(Arg_&& arg, Args_... args);
    std::string* mutable_token();
    PROTOBUF_NODISCARD std::string* release_token();
    void set_allocated_token(std::string* value);

  private:
    const std::string& _internal_token() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_token(const std::string& value);
    std::string* _internal_mutable_token();

  public:
    // bytes content = 4;
    void clear_content();
    const std::string& content() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_content(Arg_&& arg, Args_... args);
    std::string* mutable_content();
    PROTOBUF_NODISCARD std::string* release_content();
    void set_allocated_content(std::string* value);

  private:
    const std::string& _internal_content() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_content(const std::string& value);
    std::string* _internal_mutable_content();

  public:
    // @@protoc_insertion_point(class_scope:zpods.UploadPodRequest)
  private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 53, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from);
        ::google::protobuf::internal::ArenaStringPtr pods_name_;
        ::google::protobuf::internal::ArenaStringPtr pod_name_;
        ::google::protobuf::internal::ArenaStringPtr token_;
        ::google::protobuf::internal::ArenaStringPtr content_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_zpods_2eproto;
}; // -------------------------------------------------------------------

class RegisterResponse final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zpods.RegisterResponse)
                                                                   */
{
  public:
    inline RegisterResponse() : RegisterResponse(nullptr) {}
    ~RegisterResponse() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR
        RegisterResponse(::google::protobuf::internal::ConstantInitialized);

    inline RegisterResponse(const RegisterResponse& from)
        : RegisterResponse(nullptr, from)
    {
    }
    RegisterResponse(RegisterResponse&& from) noexcept : RegisterResponse()
    {
        *this = ::std::move(from);
    }

    inline RegisterResponse& operator=(const RegisterResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline RegisterResponse& operator=(RegisterResponse&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet&
    unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet*
    mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const RegisterResponse& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const RegisterResponse* internal_default_instance()
    {
        return reinterpret_cast<const RegisterResponse*>(
            &_RegisterResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 8;

    friend void swap(RegisterResponse& a, RegisterResponse& b) { a.Swap(&b); }
    inline void Swap(RegisterResponse* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena())
        {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(RegisterResponse* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    RegisterResponse*
    New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<RegisterResponse>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const RegisterResponse& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const RegisterResponse& from)
    {
        RegisterResponse::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::google::protobuf::Message& to_msg,
                          const ::google::protobuf::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
    ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(RegisterResponse* other);

  private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "zpods.RegisterResponse";
    }

  protected:
    explicit RegisterResponse(::google::protobuf::Arena* arena);
    RegisterResponse(::google::protobuf::Arena* arena,
                     const RegisterResponse& from);

  public:
    static const ClassData _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kMessageFieldNumber = 2,
        kSuccessFieldNumber = 1,
    };
    // string message = 2;
    void clear_message();
    const std::string& message() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_message(Arg_&& arg, Args_... args);
    std::string* mutable_message();
    PROTOBUF_NODISCARD std::string* release_message();
    void set_allocated_message(std::string* value);

  private:
    const std::string& _internal_message() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_message(const std::string& value);
    std::string* _internal_mutable_message();

  public:
    // bool success = 1;
    void clear_success();
    bool success() const;
    void set_success(bool value);

  private:
    bool _internal_success() const;
    void _internal_set_success(bool value);

  public:
    // @@protoc_insertion_point(class_scope:zpods.RegisterResponse)
  private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 38, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from);
        ::google::protobuf::internal::ArenaStringPtr message_;
        bool success_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_zpods_2eproto;
}; // -------------------------------------------------------------------

class RegisterRequest final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zpods.RegisterRequest)
                                                                  */
{
  public:
    inline RegisterRequest() : RegisterRequest(nullptr) {}
    ~RegisterRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR
        RegisterRequest(::google::protobuf::internal::ConstantInitialized);

    inline RegisterRequest(const RegisterRequest& from)
        : RegisterRequest(nullptr, from)
    {
    }
    RegisterRequest(RegisterRequest&& from) noexcept : RegisterRequest()
    {
        *this = ::std::move(from);
    }

    inline RegisterRequest& operator=(const RegisterRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline RegisterRequest& operator=(RegisterRequest&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet&
    unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet*
    mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const RegisterRequest& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const RegisterRequest* internal_default_instance()
    {
        return reinterpret_cast<const RegisterRequest*>(
            &_RegisterRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 7;

    friend void swap(RegisterRequest& a, RegisterRequest& b) { a.Swap(&b); }
    inline void Swap(RegisterRequest* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena())
        {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(RegisterRequest* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    RegisterRequest* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<RegisterRequest>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const RegisterRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const RegisterRequest& from)
    {
        RegisterRequest::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::google::protobuf::Message& to_msg,
                          const ::google::protobuf::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
    ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(RegisterRequest* other);

  private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "zpods.RegisterRequest";
    }

  protected:
    explicit RegisterRequest(::google::protobuf::Arena* arena);
    RegisterRequest(::google::protobuf::Arena* arena,
                    const RegisterRequest& from);

  public:
    static const ClassData _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kUsernameFieldNumber = 1,
        kPasswordFieldNumber = 2,
    };
    // string username = 1;
    void clear_username();
    const std::string& username() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_username(Arg_&& arg, Args_... args);
    std::string* mutable_username();
    PROTOBUF_NODISCARD std::string* release_username();
    void set_allocated_username(std::string* value);

  private:
    const std::string& _internal_username() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_username(const std::string& value);
    std::string* _internal_mutable_username();

  public:
    // string password = 2;
    void clear_password();
    const std::string& password() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_password(Arg_&& arg, Args_... args);
    std::string* mutable_password();
    PROTOBUF_NODISCARD std::string* release_password();
    void set_allocated_password(std::string* value);

  private:
    const std::string& _internal_password() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_password(const std::string& value);
    std::string* _internal_mutable_password();

  public:
    // @@protoc_insertion_point(class_scope:zpods.RegisterRequest)
  private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 46, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from);
        ::google::protobuf::internal::ArenaStringPtr username_;
        ::google::protobuf::internal::ArenaStringPtr password_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_zpods_2eproto;
}; // -------------------------------------------------------------------

class QueryPodsRequest final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zpods.QueryPodsRequest)
                                                                   */
{
  public:
    inline QueryPodsRequest() : QueryPodsRequest(nullptr) {}
    ~QueryPodsRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR
        QueryPodsRequest(::google::protobuf::internal::ConstantInitialized);

    inline QueryPodsRequest(const QueryPodsRequest& from)
        : QueryPodsRequest(nullptr, from)
    {
    }
    QueryPodsRequest(QueryPodsRequest&& from) noexcept : QueryPodsRequest()
    {
        *this = ::std::move(from);
    }

    inline QueryPodsRequest& operator=(const QueryPodsRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline QueryPodsRequest& operator=(QueryPodsRequest&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet&
    unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet*
    mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const QueryPodsRequest& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const QueryPodsRequest* internal_default_instance()
    {
        return reinterpret_cast<const QueryPodsRequest*>(
            &_QueryPodsRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;

    friend void swap(QueryPodsRequest& a, QueryPodsRequest& b) { a.Swap(&b); }
    inline void Swap(QueryPodsRequest* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena())
        {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(QueryPodsRequest* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    QueryPodsRequest*
    New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<QueryPodsRequest>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const QueryPodsRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const QueryPodsRequest& from)
    {
        QueryPodsRequest::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::google::protobuf::Message& to_msg,
                          const ::google::protobuf::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
    ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(QueryPodsRequest* other);

  private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "zpods.QueryPodsRequest";
    }

  protected:
    explicit QueryPodsRequest(::google::protobuf::Arena* arena);
    QueryPodsRequest(::google::protobuf::Arena* arena,
                     const QueryPodsRequest& from);

  public:
    static const ClassData _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kTokenFieldNumber = 1,
    };
    // string token = 1;
    void clear_token();
    const std::string& token() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_token(Arg_&& arg, Args_... args);
    std::string* mutable_token();
    PROTOBUF_NODISCARD std::string* release_token();
    void set_allocated_token(std::string* value);

  private:
    const std::string& _internal_token() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_token(const std::string& value);
    std::string* _internal_mutable_token();

  public:
    // @@protoc_insertion_point(class_scope:zpods.QueryPodsRequest)
  private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 36, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from);
        ::google::protobuf::internal::ArenaStringPtr token_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_zpods_2eproto;
}; // -------------------------------------------------------------------

class PodList final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zpods.PodList)
                                                          */
{
  public:
    inline PodList() : PodList(nullptr) {}
    ~PodList() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR
        PodList(::google::protobuf::internal::ConstantInitialized);

    inline PodList(const PodList& from) : PodList(nullptr, from) {}
    PodList(PodList&& from) noexcept : PodList() { *this = ::std::move(from); }

    inline PodList& operator=(const PodList& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline PodList& operator=(PodList&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet&
    unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet*
    mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const PodList& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const PodList* internal_default_instance()
    {
        return reinterpret_cast<const PodList*>(&_PodList_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 3;

    friend void swap(PodList& a, PodList& b) { a.Swap(&b); }
    inline void Swap(PodList* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena())
        {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(PodList* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    PodList* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<PodList>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const PodList& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const PodList& from) { PodList::MergeImpl(*this, from); }

  private:
    static void MergeImpl(::google::protobuf::Message& to_msg,
                          const ::google::protobuf::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
    ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(PodList* other);

  private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName() { return "zpods.PodList"; }

  protected:
    explicit PodList(::google::protobuf::Arena* arena);
    PodList(::google::protobuf::Arena* arena, const PodList& from);

  public:
    static const ClassData _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kPodNameFieldNumber = 1,
        kLastModifiedTimeFieldNumber = 2,
    };
    // repeated string pod_name = 1;
    int pod_name_size() const;

  private:
    int _internal_pod_name_size() const;

  public:
    void clear_pod_name();
    const std::string& pod_name(int index) const;
    std::string* mutable_pod_name(int index);
    void set_pod_name(int index, const std::string& value);
    void set_pod_name(int index, std::string&& value);
    void set_pod_name(int index, const char* value);
    void set_pod_name(int index, const char* value, std::size_t size);
    void set_pod_name(int index, absl::string_view value);
    std::string* add_pod_name();
    void add_pod_name(const std::string& value);
    void add_pod_name(std::string&& value);
    void add_pod_name(const char* value);
    void add_pod_name(const char* value, std::size_t size);
    void add_pod_name(absl::string_view value);
    const ::google::protobuf::RepeatedPtrField<std::string>& pod_name() const;
    ::google::protobuf::RepeatedPtrField<std::string>* mutable_pod_name();

  private:
    const ::google::protobuf::RepeatedPtrField<std::string>&
    _internal_pod_name() const;
    ::google::protobuf::RepeatedPtrField<std::string>*
    _internal_mutable_pod_name();

  public:
    // repeated int32 last_modified_time = 2;
    int last_modified_time_size() const;

  private:
    int _internal_last_modified_time_size() const;

  public:
    void clear_last_modified_time();
    ::int32_t last_modified_time(int index) const;
    void set_last_modified_time(int index, ::int32_t value);
    void add_last_modified_time(::int32_t value);
    const ::google::protobuf::RepeatedField<::int32_t>&
    last_modified_time() const;
    ::google::protobuf::RepeatedField<::int32_t>* mutable_last_modified_time();

  private:
    const ::google::protobuf::RepeatedField<::int32_t>&
    _internal_last_modified_time() const;
    ::google::protobuf::RepeatedField<::int32_t>*
    _internal_mutable_last_modified_time();

  public:
    // @@protoc_insertion_point(class_scope:zpods.PodList)
  private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 30, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from);
        ::google::protobuf::RepeatedPtrField<std::string> pod_name_;
        ::google::protobuf::RepeatedField<::int32_t> last_modified_time_;
        mutable ::google::protobuf::internal::CachedSize
            _last_modified_time_cached_byte_size_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_zpods_2eproto;
}; // -------------------------------------------------------------------

class LoginResponse final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zpods.LoginResponse)
                                                                */
{
  public:
    inline LoginResponse() : LoginResponse(nullptr) {}
    ~LoginResponse() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR
        LoginResponse(::google::protobuf::internal::ConstantInitialized);

    inline LoginResponse(const LoginResponse& from)
        : LoginResponse(nullptr, from)
    {
    }
    LoginResponse(LoginResponse&& from) noexcept : LoginResponse()
    {
        *this = ::std::move(from);
    }

    inline LoginResponse& operator=(const LoginResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline LoginResponse& operator=(LoginResponse&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet&
    unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet*
    mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const LoginResponse& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const LoginResponse* internal_default_instance()
    {
        return reinterpret_cast<const LoginResponse*>(
            &_LoginResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 10;

    friend void swap(LoginResponse& a, LoginResponse& b) { a.Swap(&b); }
    inline void Swap(LoginResponse* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena())
        {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(LoginResponse* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    LoginResponse* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<LoginResponse>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const LoginResponse& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const LoginResponse& from)
    {
        LoginResponse::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::google::protobuf::Message& to_msg,
                          const ::google::protobuf::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
    ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(LoginResponse* other);

  private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "zpods.LoginResponse";
    }

  protected:
    explicit LoginResponse(::google::protobuf::Arena* arena);
    LoginResponse(::google::protobuf::Arena* arena, const LoginResponse& from);

  public:
    static const ClassData _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kMessageFieldNumber = 2,
        kTokenFieldNumber = 3,
        kSuccessFieldNumber = 1,
    };
    // string message = 2;
    void clear_message();
    const std::string& message() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_message(Arg_&& arg, Args_... args);
    std::string* mutable_message();
    PROTOBUF_NODISCARD std::string* release_message();
    void set_allocated_message(std::string* value);

  private:
    const std::string& _internal_message() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_message(const std::string& value);
    std::string* _internal_mutable_message();

  public:
    // string token = 3;
    void clear_token();
    const std::string& token() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_token(Arg_&& arg, Args_... args);
    std::string* mutable_token();
    PROTOBUF_NODISCARD std::string* release_token();
    void set_allocated_token(std::string* value);

  private:
    const std::string& _internal_token() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_token(const std::string& value);
    std::string* _internal_mutable_token();

  public:
    // bool success = 1;
    void clear_success();
    bool success() const;
    void set_success(bool value);

  private:
    bool _internal_success() const;
    void _internal_set_success(bool value);

  public:
    // @@protoc_insertion_point(class_scope:zpods.LoginResponse)
  private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 40, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from);
        ::google::protobuf::internal::ArenaStringPtr message_;
        ::google::protobuf::internal::ArenaStringPtr token_;
        bool success_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_zpods_2eproto;
}; // -------------------------------------------------------------------

class LoginRequest final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zpods.LoginRequest)
                                                               */
{
  public:
    inline LoginRequest() : LoginRequest(nullptr) {}
    ~LoginRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR
        LoginRequest(::google::protobuf::internal::ConstantInitialized);

    inline LoginRequest(const LoginRequest& from) : LoginRequest(nullptr, from)
    {
    }
    LoginRequest(LoginRequest&& from) noexcept : LoginRequest()
    {
        *this = ::std::move(from);
    }

    inline LoginRequest& operator=(const LoginRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline LoginRequest& operator=(LoginRequest&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet&
    unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet*
    mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const LoginRequest& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const LoginRequest* internal_default_instance()
    {
        return reinterpret_cast<const LoginRequest*>(
            &_LoginRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 9;

    friend void swap(LoginRequest& a, LoginRequest& b) { a.Swap(&b); }
    inline void Swap(LoginRequest* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena())
        {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(LoginRequest* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    LoginRequest* New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<LoginRequest>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const LoginRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const LoginRequest& from)
    {
        LoginRequest::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::google::protobuf::Message& to_msg,
                          const ::google::protobuf::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
    ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(LoginRequest* other);

  private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "zpods.LoginRequest";
    }

  protected:
    explicit LoginRequest(::google::protobuf::Arena* arena);
    LoginRequest(::google::protobuf::Arena* arena, const LoginRequest& from);

  public:
    static const ClassData _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kUsernameFieldNumber = 1,
        kPasswordFieldNumber = 2,
    };
    // string username = 1;
    void clear_username();
    const std::string& username() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_username(Arg_&& arg, Args_... args);
    std::string* mutable_username();
    PROTOBUF_NODISCARD std::string* release_username();
    void set_allocated_username(std::string* value);

  private:
    const std::string& _internal_username() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_username(const std::string& value);
    std::string* _internal_mutable_username();

  public:
    // string password = 2;
    void clear_password();
    const std::string& password() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_password(Arg_&& arg, Args_... args);
    std::string* mutable_password();
    PROTOBUF_NODISCARD std::string* release_password();
    void set_allocated_password(std::string* value);

  private:
    const std::string& _internal_password() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_password(const std::string& value);
    std::string* _internal_mutable_password();

  public:
    // @@protoc_insertion_point(class_scope:zpods.LoginRequest)
  private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 43, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from);
        ::google::protobuf::internal::ArenaStringPtr username_;
        ::google::protobuf::internal::ArenaStringPtr password_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_zpods_2eproto;
}; // -------------------------------------------------------------------

class DownloadPodResponse final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zpods.DownloadPodResponse)
                                                                      */
{
  public:
    inline DownloadPodResponse() : DownloadPodResponse(nullptr) {}
    ~DownloadPodResponse() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR
        DownloadPodResponse(::google::protobuf::internal::ConstantInitialized);

    inline DownloadPodResponse(const DownloadPodResponse& from)
        : DownloadPodResponse(nullptr, from)
    {
    }
    DownloadPodResponse(DownloadPodResponse&& from) noexcept
        : DownloadPodResponse()
    {
        *this = ::std::move(from);
    }

    inline DownloadPodResponse& operator=(const DownloadPodResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline DownloadPodResponse& operator=(DownloadPodResponse&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet&
    unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet*
    mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const DownloadPodResponse& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const DownloadPodResponse* internal_default_instance()
    {
        return reinterpret_cast<const DownloadPodResponse*>(
            &_DownloadPodResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 6;

    friend void swap(DownloadPodResponse& a, DownloadPodResponse& b)
    {
        a.Swap(&b);
    }
    inline void Swap(DownloadPodResponse* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena())
        {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(DownloadPodResponse* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    DownloadPodResponse*
    New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<DownloadPodResponse>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const DownloadPodResponse& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const DownloadPodResponse& from)
    {
        DownloadPodResponse::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::google::protobuf::Message& to_msg,
                          const ::google::protobuf::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
    ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(DownloadPodResponse* other);

  private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "zpods.DownloadPodResponse";
    }

  protected:
    explicit DownloadPodResponse(::google::protobuf::Arena* arena);
    DownloadPodResponse(::google::protobuf::Arena* arena,
                        const DownloadPodResponse& from);

  public:
    static const ClassData _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kContentFieldNumber = 1,
    };
    // bytes content = 1;
    void clear_content();
    const std::string& content() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_content(Arg_&& arg, Args_... args);
    std::string* mutable_content();
    PROTOBUF_NODISCARD std::string* release_content();
    void set_allocated_content(std::string* value);

  private:
    const std::string& _internal_content() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_content(const std::string& value);
    std::string* _internal_mutable_content();

  public:
    // @@protoc_insertion_point(class_scope:zpods.DownloadPodResponse)
  private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from);
        ::google::protobuf::internal::ArenaStringPtr content_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_zpods_2eproto;
}; // -------------------------------------------------------------------

class DownloadPodRequest final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zpods.DownloadPodRequest)
                                                                     */
{
  public:
    inline DownloadPodRequest() : DownloadPodRequest(nullptr) {}
    ~DownloadPodRequest() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR
        DownloadPodRequest(::google::protobuf::internal::ConstantInitialized);

    inline DownloadPodRequest(const DownloadPodRequest& from)
        : DownloadPodRequest(nullptr, from)
    {
    }
    DownloadPodRequest(DownloadPodRequest&& from) noexcept
        : DownloadPodRequest()
    {
        *this = ::std::move(from);
    }

    inline DownloadPodRequest& operator=(const DownloadPodRequest& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline DownloadPodRequest& operator=(DownloadPodRequest&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet&
    unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet*
    mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const DownloadPodRequest& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const DownloadPodRequest* internal_default_instance()
    {
        return reinterpret_cast<const DownloadPodRequest*>(
            &_DownloadPodRequest_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 5;

    friend void swap(DownloadPodRequest& a, DownloadPodRequest& b)
    {
        a.Swap(&b);
    }
    inline void Swap(DownloadPodRequest* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena())
        {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(DownloadPodRequest* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    DownloadPodRequest*
    New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<DownloadPodRequest>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const DownloadPodRequest& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const DownloadPodRequest& from)
    {
        DownloadPodRequest::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::google::protobuf::Message& to_msg,
                          const ::google::protobuf::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
    ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(DownloadPodRequest* other);

  private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "zpods.DownloadPodRequest";
    }

  protected:
    explicit DownloadPodRequest(::google::protobuf::Arena* arena);
    DownloadPodRequest(::google::protobuf::Arena* arena,
                       const DownloadPodRequest& from);

  public:
    static const ClassData _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kPodsNameFieldNumber = 1,
        kPodNameFieldNumber = 2,
        kTokenFieldNumber = 3,
    };
    // string pods_name = 1;
    void clear_pods_name();
    const std::string& pods_name() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_pods_name(Arg_&& arg, Args_... args);
    std::string* mutable_pods_name();
    PROTOBUF_NODISCARD std::string* release_pods_name();
    void set_allocated_pods_name(std::string* value);

  private:
    const std::string& _internal_pods_name() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_pods_name(const std::string& value);
    std::string* _internal_mutable_pods_name();

  public:
    // string pod_name = 2;
    void clear_pod_name();
    const std::string& pod_name() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_pod_name(Arg_&& arg, Args_... args);
    std::string* mutable_pod_name();
    PROTOBUF_NODISCARD std::string* release_pod_name();
    void set_allocated_pod_name(std::string* value);

  private:
    const std::string& _internal_pod_name() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_pod_name(const std::string& value);
    std::string* _internal_mutable_pod_name();

  public:
    // string token = 3;
    void clear_token();
    const std::string& token() const;
    template <typename Arg_ = const std::string&, typename... Args_>
    void set_token(Arg_&& arg, Args_... args);
    std::string* mutable_token();
    PROTOBUF_NODISCARD std::string* release_token();
    void set_allocated_token(std::string* value);

  private:
    const std::string& _internal_token() const;
    inline PROTOBUF_ALWAYS_INLINE void
    _internal_set_token(const std::string& value);
    std::string* _internal_mutable_token();

  public:
    // @@protoc_insertion_point(class_scope:zpods.DownloadPodRequest)
  private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<2, 3, 0, 55, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from);
        ::google::protobuf::internal::ArenaStringPtr pods_name_;
        ::google::protobuf::internal::ArenaStringPtr pod_name_;
        ::google::protobuf::internal::ArenaStringPtr token_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_zpods_2eproto;
}; // -------------------------------------------------------------------

class QueryPodsResponse final : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zpods.QueryPodsResponse)
                                                                    */
{
  public:
    inline QueryPodsResponse() : QueryPodsResponse(nullptr) {}
    ~QueryPodsResponse() override;
    template <typename = void>
    explicit PROTOBUF_CONSTEXPR
        QueryPodsResponse(::google::protobuf::internal::ConstantInitialized);

    inline QueryPodsResponse(const QueryPodsResponse& from)
        : QueryPodsResponse(nullptr, from)
    {
    }
    QueryPodsResponse(QueryPodsResponse&& from) noexcept : QueryPodsResponse()
    {
        *this = ::std::move(from);
    }

    inline QueryPodsResponse& operator=(const QueryPodsResponse& from)
    {
        CopyFrom(from);
        return *this;
    }
    inline QueryPodsResponse& operator=(QueryPodsResponse&& from) noexcept
    {
        if (this == &from)
            return *this;
        if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
            && GetArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
        )
        {
            InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet&
    unknown_fields() const ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .unknown_fields<::google::protobuf::UnknownFieldSet>(
                ::google::protobuf::UnknownFieldSet::default_instance);
    }
    inline ::google::protobuf::UnknownFieldSet*
    mutable_unknown_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND
    {
        return _internal_metadata_
            .mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
    }

    static const ::google::protobuf::Descriptor* descriptor()
    {
        return GetDescriptor();
    }
    static const ::google::protobuf::Descriptor* GetDescriptor()
    {
        return default_instance().GetMetadata().descriptor;
    }
    static const ::google::protobuf::Reflection* GetReflection()
    {
        return default_instance().GetMetadata().reflection;
    }
    static const QueryPodsResponse& default_instance()
    {
        return *internal_default_instance();
    }
    static inline const QueryPodsResponse* internal_default_instance()
    {
        return reinterpret_cast<const QueryPodsResponse*>(
            &_QueryPodsResponse_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 4;

    friend void swap(QueryPodsResponse& a, QueryPodsResponse& b) { a.Swap(&b); }
    inline void Swap(QueryPodsResponse* other)
    {
        if (other == this)
            return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() != nullptr && GetArena() == other->GetArena())
        {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
        if (GetArena() == other->GetArena())
        {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
            InternalSwap(other);
        }
        else
        {
            ::google::protobuf::internal::GenericSwap(this, other);
        }
    }
    void UnsafeArenaSwap(QueryPodsResponse* other)
    {
        if (other == this)
            return;
        ABSL_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    QueryPodsResponse*
    New(::google::protobuf::Arena* arena = nullptr) const final
    {
        return CreateMaybeMessage<QueryPodsResponse>(arena);
    }
    using ::google::protobuf::Message::CopyFrom;
    void CopyFrom(const QueryPodsResponse& from);
    using ::google::protobuf::Message::MergeFrom;
    void MergeFrom(const QueryPodsResponse& from)
    {
        QueryPodsResponse::MergeImpl(*this, from);
    }

  private:
    static void MergeImpl(::google::protobuf::Message& to_msg,
                          const ::google::protobuf::Message& from_msg);

  public:
    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
    bool IsInitialized() const final;

    ::size_t ByteSizeLong() const final;
    const char*
    _InternalParse(const char* ptr,
                   ::google::protobuf::internal::ParseContext* ctx) final;
    ::uint8_t* _InternalSerialize(
        ::uint8_t* target,
        ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
    int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
    ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
    void SharedCtor(::google::protobuf::Arena* arena);
    void SharedDtor();
    void InternalSwap(QueryPodsResponse* other);

  private:
    friend class ::google::protobuf::internal::AnyMetadata;
    static ::absl::string_view FullMessageName()
    {
        return "zpods.QueryPodsResponse";
    }

  protected:
    explicit QueryPodsResponse(::google::protobuf::Arena* arena);
    QueryPodsResponse(::google::protobuf::Arena* arena,
                      const QueryPodsResponse& from);

  public:
    static const ClassData _class_data_;
    const ::google::protobuf::Message::ClassData* GetClassData() const final;

    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int
    {
        kPodsNameFieldNumber = 1,
        kPodListFieldNumber = 2,
    };
    // repeated string pods_name = 1;
    int pods_name_size() const;

  private:
    int _internal_pods_name_size() const;

  public:
    void clear_pods_name();
    const std::string& pods_name(int index) const;
    std::string* mutable_pods_name(int index);
    void set_pods_name(int index, const std::string& value);
    void set_pods_name(int index, std::string&& value);
    void set_pods_name(int index, const char* value);
    void set_pods_name(int index, const char* value, std::size_t size);
    void set_pods_name(int index, absl::string_view value);
    std::string* add_pods_name();
    void add_pods_name(const std::string& value);
    void add_pods_name(std::string&& value);
    void add_pods_name(const char* value);
    void add_pods_name(const char* value, std::size_t size);
    void add_pods_name(absl::string_view value);
    const ::google::protobuf::RepeatedPtrField<std::string>& pods_name() const;
    ::google::protobuf::RepeatedPtrField<std::string>* mutable_pods_name();

  private:
    const ::google::protobuf::RepeatedPtrField<std::string>&
    _internal_pods_name() const;
    ::google::protobuf::RepeatedPtrField<std::string>*
    _internal_mutable_pods_name();

  public:
    // repeated .zpods.PodList pod_list = 2;
    int pod_list_size() const;

  private:
    int _internal_pod_list_size() const;

  public:
    void clear_pod_list();
    ::zpods::PodList* mutable_pod_list(int index);
    ::google::protobuf::RepeatedPtrField<::zpods::PodList>* mutable_pod_list();

  private:
    const ::google::protobuf::RepeatedPtrField<::zpods::PodList>&
    _internal_pod_list() const;
    ::google::protobuf::RepeatedPtrField<::zpods::PodList>*
    _internal_mutable_pod_list();

  public:
    const ::zpods::PodList& pod_list(int index) const;
    ::zpods::PodList* add_pod_list();
    const ::google::protobuf::RepeatedPtrField<::zpods::PodList>&
    pod_list() const;
    // @@protoc_insertion_point(class_scope:zpods.QueryPodsResponse)
  private:
    class _Internal;

    friend class ::google::protobuf::internal::TcParser;
    static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 41, 2>
        _table_;
    friend class ::google::protobuf::MessageLite;
    friend class ::google::protobuf::Arena;
    template <typename T>
    friend class ::google::protobuf::Arena::InternalHelper;
    using InternalArenaConstructable_ = void;
    using DestructorSkippable_ = void;
    struct Impl_
    {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena);
        inline explicit Impl_(
            ::google::protobuf::internal::InternalVisibility visibility,
            ::google::protobuf::Arena* arena, const Impl_& from);
        ::google::protobuf::RepeatedPtrField<std::string> pods_name_;
        ::google::protobuf::RepeatedPtrField<::zpods::PodList> pod_list_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        PROTOBUF_TSAN_DECLARE_MEMBER
    };
    union
    {
        Impl_ _impl_;
    };
    friend struct ::TableStruct_zpods_2eproto;
};

// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// -------------------------------------------------------------------

// UploadPodRequest

// string pods_name = 1;
inline void UploadPodRequest::clear_pods_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.pods_name_.ClearToEmpty();
}
inline const std::string&
UploadPodRequest::pods_name() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.UploadPodRequest.pods_name)
    return _internal_pods_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void
UploadPodRequest::set_pods_name(Arg_&& arg, Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.pods_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.UploadPodRequest.pods_name)
}
inline std::string*
UploadPodRequest::mutable_pods_name() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_pods_name();
    // @@protoc_insertion_point(field_mutable:zpods.UploadPodRequest.pods_name)
    return _s;
}
inline const std::string& UploadPodRequest::_internal_pods_name() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.pods_name_.Get();
}
inline void UploadPodRequest::_internal_set_pods_name(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.pods_name_.Set(value, GetArena());
}
inline std::string* UploadPodRequest::_internal_mutable_pods_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.pods_name_.Mutable(GetArena());
}
inline std::string* UploadPodRequest::release_pods_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.UploadPodRequest.pods_name)
    return _impl_.pods_name_.Release();
}
inline void UploadPodRequest::set_allocated_pods_name(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.pods_name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.pods_name_.IsDefault())
    {
        _impl_.pods_name_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.UploadPodRequest.pods_name)
}

// string pod_name = 2;
inline void UploadPodRequest::clear_pod_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.pod_name_.ClearToEmpty();
}
inline const std::string&
UploadPodRequest::pod_name() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.UploadPodRequest.pod_name)
    return _internal_pod_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadPodRequest::set_pod_name(Arg_&& arg,
                                                                  Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.pod_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.UploadPodRequest.pod_name)
}
inline std::string*
UploadPodRequest::mutable_pod_name() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_pod_name();
    // @@protoc_insertion_point(field_mutable:zpods.UploadPodRequest.pod_name)
    return _s;
}
inline const std::string& UploadPodRequest::_internal_pod_name() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.pod_name_.Get();
}
inline void UploadPodRequest::_internal_set_pod_name(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.pod_name_.Set(value, GetArena());
}
inline std::string* UploadPodRequest::_internal_mutable_pod_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.pod_name_.Mutable(GetArena());
}
inline std::string* UploadPodRequest::release_pod_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.UploadPodRequest.pod_name)
    return _impl_.pod_name_.Release();
}
inline void UploadPodRequest::set_allocated_pod_name(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.pod_name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.pod_name_.IsDefault())
    {
        _impl_.pod_name_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.UploadPodRequest.pod_name)
}

// string token = 3;
inline void UploadPodRequest::clear_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.token_.ClearToEmpty();
}
inline const std::string&
UploadPodRequest::token() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.UploadPodRequest.token)
    return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadPodRequest::set_token(Arg_&& arg,
                                                               Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.UploadPodRequest.token)
}
inline std::string*
UploadPodRequest::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_token();
    // @@protoc_insertion_point(field_mutable:zpods.UploadPodRequest.token)
    return _s;
}
inline const std::string& UploadPodRequest::_internal_token() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.token_.Get();
}
inline void UploadPodRequest::_internal_set_token(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.token_.Set(value, GetArena());
}
inline std::string* UploadPodRequest::_internal_mutable_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.token_.Mutable(GetArena());
}
inline std::string* UploadPodRequest::release_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.UploadPodRequest.token)
    return _impl_.token_.Release();
}
inline void UploadPodRequest::set_allocated_token(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.token_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.token_.IsDefault())
    {
        _impl_.token_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.UploadPodRequest.token)
}

// bytes content = 4;
inline void UploadPodRequest::clear_content()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.content_.ClearToEmpty();
}
inline const std::string&
UploadPodRequest::content() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.UploadPodRequest.content)
    return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadPodRequest::set_content(Arg_&& arg,
                                                                 Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.UploadPodRequest.content)
}
inline std::string*
UploadPodRequest::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_content();
    // @@protoc_insertion_point(field_mutable:zpods.UploadPodRequest.content)
    return _s;
}
inline const std::string& UploadPodRequest::_internal_content() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.content_.Get();
}
inline void UploadPodRequest::_internal_set_content(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.content_.Set(value, GetArena());
}
inline std::string* UploadPodRequest::_internal_mutable_content()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.content_.Mutable(GetArena());
}
inline std::string* UploadPodRequest::release_content()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.UploadPodRequest.content)
    return _impl_.content_.Release();
}
inline void UploadPodRequest::set_allocated_content(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.content_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.content_.IsDefault())
    {
        _impl_.content_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.UploadPodRequest.content)
}

// -------------------------------------------------------------------

// UploadStatus

// bool success = 1;
inline void UploadStatus::clear_success()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.success_ = false;
}
inline bool UploadStatus::success() const
{
    // @@protoc_insertion_point(field_get:zpods.UploadStatus.success)
    return _internal_success();
}
inline void UploadStatus::set_success(bool value)
{
    _internal_set_success(value);
    // @@protoc_insertion_point(field_set:zpods.UploadStatus.success)
}
inline bool UploadStatus::_internal_success() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.success_;
}
inline void UploadStatus::_internal_set_success(bool value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.success_ = value;
}

// -------------------------------------------------------------------

// QueryPodsRequest

// string token = 1;
inline void QueryPodsRequest::clear_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.token_.ClearToEmpty();
}
inline const std::string&
QueryPodsRequest::token() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.QueryPodsRequest.token)
    return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPodsRequest::set_token(Arg_&& arg,
                                                               Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.QueryPodsRequest.token)
}
inline std::string*
QueryPodsRequest::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_token();
    // @@protoc_insertion_point(field_mutable:zpods.QueryPodsRequest.token)
    return _s;
}
inline const std::string& QueryPodsRequest::_internal_token() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.token_.Get();
}
inline void QueryPodsRequest::_internal_set_token(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.token_.Set(value, GetArena());
}
inline std::string* QueryPodsRequest::_internal_mutable_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.token_.Mutable(GetArena());
}
inline std::string* QueryPodsRequest::release_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.QueryPodsRequest.token)
    return _impl_.token_.Release();
}
inline void QueryPodsRequest::set_allocated_token(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.token_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.token_.IsDefault())
    {
        _impl_.token_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.QueryPodsRequest.token)
}

// -------------------------------------------------------------------

// PodList

// repeated string pod_name = 1;
inline int PodList::_internal_pod_name_size() const
{
    return _internal_pod_name().size();
}
inline int PodList::pod_name_size() const
{
    return _internal_pod_name_size();
}
inline void PodList::clear_pod_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.pod_name_.Clear();
}
inline std::string* PodList::add_pod_name() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    std::string* _s = _internal_mutable_pod_name()->Add();
    // @@protoc_insertion_point(field_add_mutable:zpods.PodList.pod_name)
    return _s;
}
inline const std::string&
PodList::pod_name(int index) const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.PodList.pod_name)
    return _internal_pod_name().Get(index);
}
inline std::string*
PodList::mutable_pod_name(int index) ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable:zpods.PodList.pod_name)
    return _internal_mutable_pod_name()->Mutable(index);
}
inline void PodList::set_pod_name(int index, const std::string& value)
{
    _internal_mutable_pod_name()->Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set:zpods.PodList.pod_name)
}
inline void PodList::set_pod_name(int index, std::string&& value)
{
    _internal_mutable_pod_name()->Mutable(index)->assign(std::move(value));
    // @@protoc_insertion_point(field_set:zpods.PodList.pod_name)
}
inline void PodList::set_pod_name(int index, const char* value)
{
    ABSL_DCHECK(value != nullptr);
    _internal_mutable_pod_name()->Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:zpods.PodList.pod_name)
}
inline void PodList::set_pod_name(int index, const char* value,
                                  std::size_t size)
{
    _internal_mutable_pod_name()->Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:zpods.PodList.pod_name)
}
inline void PodList::set_pod_name(int index, absl::string_view value)
{
    _internal_mutable_pod_name()->Mutable(index)->assign(value.data(),
                                                         value.size());
    // @@protoc_insertion_point(field_set_string_piece:zpods.PodList.pod_name)
}
inline void PodList::add_pod_name(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_pod_name()->Add()->assign(value);
    // @@protoc_insertion_point(field_add:zpods.PodList.pod_name)
}
inline void PodList::add_pod_name(std::string&& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_pod_name()->Add(std::move(value));
    // @@protoc_insertion_point(field_add:zpods.PodList.pod_name)
}
inline void PodList::add_pod_name(const char* value)
{
    ABSL_DCHECK(value != nullptr);
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_pod_name()->Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:zpods.PodList.pod_name)
}
inline void PodList::add_pod_name(const char* value, std::size_t size)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_pod_name()->Add()->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:zpods.PodList.pod_name)
}
inline void PodList::add_pod_name(absl::string_view value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_pod_name()->Add()->assign(value.data(), value.size());
    // @@protoc_insertion_point(field_add_string_piece:zpods.PodList.pod_name)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PodList::pod_name() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_list:zpods.PodList.pod_name)
    return _internal_pod_name();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PodList::mutable_pod_name() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable_list:zpods.PodList.pod_name)
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _internal_mutable_pod_name();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PodList::_internal_pod_name() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.pod_name_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PodList::_internal_mutable_pod_name()
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return &_impl_.pod_name_;
}

// repeated int32 last_modified_time = 2;
inline int PodList::_internal_last_modified_time_size() const
{
    return _internal_last_modified_time().size();
}
inline int PodList::last_modified_time_size() const
{
    return _internal_last_modified_time_size();
}
inline void PodList::clear_last_modified_time()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.last_modified_time_.Clear();
}
inline ::int32_t PodList::last_modified_time(int index) const
{
    // @@protoc_insertion_point(field_get:zpods.PodList.last_modified_time)
    return _internal_last_modified_time().Get(index);
}
inline void PodList::set_last_modified_time(int index, ::int32_t value)
{
    _internal_mutable_last_modified_time()->Set(index, value);
    // @@protoc_insertion_point(field_set:zpods.PodList.last_modified_time)
}
inline void PodList::add_last_modified_time(::int32_t value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_last_modified_time()->Add(value);
    // @@protoc_insertion_point(field_add:zpods.PodList.last_modified_time)
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
PodList::last_modified_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_list:zpods.PodList.last_modified_time)
    return _internal_last_modified_time();
}
inline ::google::protobuf::RepeatedField<::int32_t>*
PodList::mutable_last_modified_time() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable_list:zpods.PodList.last_modified_time)
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _internal_mutable_last_modified_time();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
PodList::_internal_last_modified_time() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.last_modified_time_;
}
inline ::google::protobuf::RepeatedField<::int32_t>*
PodList::_internal_mutable_last_modified_time()
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return &_impl_.last_modified_time_;
}

// -------------------------------------------------------------------

// QueryPodsResponse

// repeated string pods_name = 1;
inline int QueryPodsResponse::_internal_pods_name_size() const
{
    return _internal_pods_name().size();
}
inline int QueryPodsResponse::pods_name_size() const
{
    return _internal_pods_name_size();
}
inline void QueryPodsResponse::clear_pods_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.pods_name_.Clear();
}
inline std::string*
QueryPodsResponse::add_pods_name() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    std::string* _s = _internal_mutable_pods_name()->Add();
    // @@protoc_insertion_point(field_add_mutable:zpods.QueryPodsResponse.pods_name)
    return _s;
}
inline const std::string&
QueryPodsResponse::pods_name(int index) const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.QueryPodsResponse.pods_name)
    return _internal_pods_name().Get(index);
}
inline std::string*
QueryPodsResponse::mutable_pods_name(int index) ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable:zpods.QueryPodsResponse.pods_name)
    return _internal_mutable_pods_name()->Mutable(index);
}
inline void QueryPodsResponse::set_pods_name(int index,
                                             const std::string& value)
{
    _internal_mutable_pods_name()->Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set:zpods.QueryPodsResponse.pods_name)
}
inline void QueryPodsResponse::set_pods_name(int index, std::string&& value)
{
    _internal_mutable_pods_name()->Mutable(index)->assign(std::move(value));
    // @@protoc_insertion_point(field_set:zpods.QueryPodsResponse.pods_name)
}
inline void QueryPodsResponse::set_pods_name(int index, const char* value)
{
    ABSL_DCHECK(value != nullptr);
    _internal_mutable_pods_name()->Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:zpods.QueryPodsResponse.pods_name)
}
inline void QueryPodsResponse::set_pods_name(int index, const char* value,
                                             std::size_t size)
{
    _internal_mutable_pods_name()->Mutable(index)->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:zpods.QueryPodsResponse.pods_name)
}
inline void QueryPodsResponse::set_pods_name(int index, absl::string_view value)
{
    _internal_mutable_pods_name()->Mutable(index)->assign(value.data(),
                                                          value.size());
    // @@protoc_insertion_point(field_set_string_piece:zpods.QueryPodsResponse.pods_name)
}
inline void QueryPodsResponse::add_pods_name(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_pods_name()->Add()->assign(value);
    // @@protoc_insertion_point(field_add:zpods.QueryPodsResponse.pods_name)
}
inline void QueryPodsResponse::add_pods_name(std::string&& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_pods_name()->Add(std::move(value));
    // @@protoc_insertion_point(field_add:zpods.QueryPodsResponse.pods_name)
}
inline void QueryPodsResponse::add_pods_name(const char* value)
{
    ABSL_DCHECK(value != nullptr);
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_pods_name()->Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:zpods.QueryPodsResponse.pods_name)
}
inline void QueryPodsResponse::add_pods_name(const char* value,
                                             std::size_t size)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_pods_name()->Add()->assign(
        reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_add_pointer:zpods.QueryPodsResponse.pods_name)
}
inline void QueryPodsResponse::add_pods_name(absl::string_view value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _internal_mutable_pods_name()->Add()->assign(value.data(), value.size());
    // @@protoc_insertion_point(field_add_string_piece:zpods.QueryPodsResponse.pods_name)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryPodsResponse::pods_name() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_list:zpods.QueryPodsResponse.pods_name)
    return _internal_pods_name();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
QueryPodsResponse::mutable_pods_name() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable_list:zpods.QueryPodsResponse.pods_name)
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _internal_mutable_pods_name();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QueryPodsResponse::_internal_pods_name() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.pods_name_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
QueryPodsResponse::_internal_mutable_pods_name()
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return &_impl_.pods_name_;
}

// repeated .zpods.PodList pod_list = 2;
inline int QueryPodsResponse::_internal_pod_list_size() const
{
    return _internal_pod_list().size();
}
inline int QueryPodsResponse::pod_list_size() const
{
    return _internal_pod_list_size();
}
inline void QueryPodsResponse::clear_pod_list()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.pod_list_.Clear();
}
inline ::zpods::PodList*
QueryPodsResponse::mutable_pod_list(int index) ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable:zpods.QueryPodsResponse.pod_list)
    return _internal_mutable_pod_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::zpods::PodList>*
QueryPodsResponse::mutable_pod_list() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_mutable_list:zpods.QueryPodsResponse.pod_list)
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    return _internal_mutable_pod_list();
}
inline const ::zpods::PodList&
QueryPodsResponse::pod_list(int index) const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.QueryPodsResponse.pod_list)
    return _internal_pod_list().Get(index);
}
inline ::zpods::PodList*
QueryPodsResponse::add_pod_list() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ::zpods::PodList* _add = _internal_mutable_pod_list()->Add();
    // @@protoc_insertion_point(field_add:zpods.QueryPodsResponse.pod_list)
    return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::zpods::PodList>&
QueryPodsResponse::pod_list() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_list:zpods.QueryPodsResponse.pod_list)
    return _internal_pod_list();
}
inline const ::google::protobuf::RepeatedPtrField<::zpods::PodList>&
QueryPodsResponse::_internal_pod_list() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.pod_list_;
}
inline ::google::protobuf::RepeatedPtrField<::zpods::PodList>*
QueryPodsResponse::_internal_mutable_pod_list()
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return &_impl_.pod_list_;
}

// -------------------------------------------------------------------

// DownloadPodRequest

// string pods_name = 1;
inline void DownloadPodRequest::clear_pods_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.pods_name_.ClearToEmpty();
}
inline const std::string&
DownloadPodRequest::pods_name() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.DownloadPodRequest.pods_name)
    return _internal_pods_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void
DownloadPodRequest::set_pods_name(Arg_&& arg, Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.pods_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.DownloadPodRequest.pods_name)
}
inline std::string*
DownloadPodRequest::mutable_pods_name() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_pods_name();
    // @@protoc_insertion_point(field_mutable:zpods.DownloadPodRequest.pods_name)
    return _s;
}
inline const std::string& DownloadPodRequest::_internal_pods_name() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.pods_name_.Get();
}
inline void
DownloadPodRequest::_internal_set_pods_name(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.pods_name_.Set(value, GetArena());
}
inline std::string* DownloadPodRequest::_internal_mutable_pods_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.pods_name_.Mutable(GetArena());
}
inline std::string* DownloadPodRequest::release_pods_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.DownloadPodRequest.pods_name)
    return _impl_.pods_name_.Release();
}
inline void DownloadPodRequest::set_allocated_pods_name(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.pods_name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.pods_name_.IsDefault())
    {
        _impl_.pods_name_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.DownloadPodRequest.pods_name)
}

// string pod_name = 2;
inline void DownloadPodRequest::clear_pod_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.pod_name_.ClearToEmpty();
}
inline const std::string&
DownloadPodRequest::pod_name() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.DownloadPodRequest.pod_name)
    return _internal_pod_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void
DownloadPodRequest::set_pod_name(Arg_&& arg, Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.pod_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.DownloadPodRequest.pod_name)
}
inline std::string*
DownloadPodRequest::mutable_pod_name() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_pod_name();
    // @@protoc_insertion_point(field_mutable:zpods.DownloadPodRequest.pod_name)
    return _s;
}
inline const std::string& DownloadPodRequest::_internal_pod_name() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.pod_name_.Get();
}
inline void DownloadPodRequest::_internal_set_pod_name(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.pod_name_.Set(value, GetArena());
}
inline std::string* DownloadPodRequest::_internal_mutable_pod_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.pod_name_.Mutable(GetArena());
}
inline std::string* DownloadPodRequest::release_pod_name()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.DownloadPodRequest.pod_name)
    return _impl_.pod_name_.Release();
}
inline void DownloadPodRequest::set_allocated_pod_name(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.pod_name_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.pod_name_.IsDefault())
    {
        _impl_.pod_name_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.DownloadPodRequest.pod_name)
}

// string token = 3;
inline void DownloadPodRequest::clear_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.token_.ClearToEmpty();
}
inline const std::string&
DownloadPodRequest::token() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.DownloadPodRequest.token)
    return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DownloadPodRequest::set_token(Arg_&& arg,
                                                                 Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.DownloadPodRequest.token)
}
inline std::string*
DownloadPodRequest::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_token();
    // @@protoc_insertion_point(field_mutable:zpods.DownloadPodRequest.token)
    return _s;
}
inline const std::string& DownloadPodRequest::_internal_token() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.token_.Get();
}
inline void DownloadPodRequest::_internal_set_token(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.token_.Set(value, GetArena());
}
inline std::string* DownloadPodRequest::_internal_mutable_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.token_.Mutable(GetArena());
}
inline std::string* DownloadPodRequest::release_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.DownloadPodRequest.token)
    return _impl_.token_.Release();
}
inline void DownloadPodRequest::set_allocated_token(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.token_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.token_.IsDefault())
    {
        _impl_.token_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.DownloadPodRequest.token)
}

// -------------------------------------------------------------------

// DownloadPodResponse

// bytes content = 1;
inline void DownloadPodResponse::clear_content()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.content_.ClearToEmpty();
}
inline const std::string&
DownloadPodResponse::content() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.DownloadPodResponse.content)
    return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void
DownloadPodResponse::set_content(Arg_&& arg, Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.DownloadPodResponse.content)
}
inline std::string*
DownloadPodResponse::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_content();
    // @@protoc_insertion_point(field_mutable:zpods.DownloadPodResponse.content)
    return _s;
}
inline const std::string& DownloadPodResponse::_internal_content() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.content_.Get();
}
inline void DownloadPodResponse::_internal_set_content(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.content_.Set(value, GetArena());
}
inline std::string* DownloadPodResponse::_internal_mutable_content()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.content_.Mutable(GetArena());
}
inline std::string* DownloadPodResponse::release_content()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.DownloadPodResponse.content)
    return _impl_.content_.Release();
}
inline void DownloadPodResponse::set_allocated_content(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.content_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.content_.IsDefault())
    {
        _impl_.content_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.DownloadPodResponse.content)
}

// -------------------------------------------------------------------

// RegisterRequest

// string username = 1;
inline void RegisterRequest::clear_username()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.username_.ClearToEmpty();
}
inline const std::string&
RegisterRequest::username() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.RegisterRequest.username)
    return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_username(Arg_&& arg,
                                                                 Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.RegisterRequest.username)
}
inline std::string*
RegisterRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_username();
    // @@protoc_insertion_point(field_mutable:zpods.RegisterRequest.username)
    return _s;
}
inline const std::string& RegisterRequest::_internal_username() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.username_.Get();
}
inline void RegisterRequest::_internal_set_username(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.username_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_username()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.username_.Mutable(GetArena());
}
inline std::string* RegisterRequest::release_username()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.RegisterRequest.username)
    return _impl_.username_.Release();
}
inline void RegisterRequest::set_allocated_username(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.username_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.username_.IsDefault())
    {
        _impl_.username_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.RegisterRequest.username)
}

// string password = 2;
inline void RegisterRequest::clear_password()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.password_.ClearToEmpty();
}
inline const std::string&
RegisterRequest::password() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.RegisterRequest.password)
    return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterRequest::set_password(Arg_&& arg,
                                                                 Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.RegisterRequest.password)
}
inline std::string*
RegisterRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_password();
    // @@protoc_insertion_point(field_mutable:zpods.RegisterRequest.password)
    return _s;
}
inline const std::string& RegisterRequest::_internal_password() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.password_.Get();
}
inline void RegisterRequest::_internal_set_password(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.password_.Set(value, GetArena());
}
inline std::string* RegisterRequest::_internal_mutable_password()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.password_.Mutable(GetArena());
}
inline std::string* RegisterRequest::release_password()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.RegisterRequest.password)
    return _impl_.password_.Release();
}
inline void RegisterRequest::set_allocated_password(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.password_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.password_.IsDefault())
    {
        _impl_.password_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.RegisterRequest.password)
}

// -------------------------------------------------------------------

// RegisterResponse

// bool success = 1;
inline void RegisterResponse::clear_success()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.success_ = false;
}
inline bool RegisterResponse::success() const
{
    // @@protoc_insertion_point(field_get:zpods.RegisterResponse.success)
    return _internal_success();
}
inline void RegisterResponse::set_success(bool value)
{
    _internal_set_success(value);
    // @@protoc_insertion_point(field_set:zpods.RegisterResponse.success)
}
inline bool RegisterResponse::_internal_success() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.success_;
}
inline void RegisterResponse::_internal_set_success(bool value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.success_ = value;
}

// string message = 2;
inline void RegisterResponse::clear_message()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.message_.ClearToEmpty();
}
inline const std::string&
RegisterResponse::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.RegisterResponse.message)
    return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterResponse::set_message(Arg_&& arg,
                                                                 Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.RegisterResponse.message)
}
inline std::string*
RegisterResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_message();
    // @@protoc_insertion_point(field_mutable:zpods.RegisterResponse.message)
    return _s;
}
inline const std::string& RegisterResponse::_internal_message() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.message_.Get();
}
inline void RegisterResponse::_internal_set_message(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.message_.Set(value, GetArena());
}
inline std::string* RegisterResponse::_internal_mutable_message()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.message_.Mutable(GetArena());
}
inline std::string* RegisterResponse::release_message()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.RegisterResponse.message)
    return _impl_.message_.Release();
}
inline void RegisterResponse::set_allocated_message(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.message_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.message_.IsDefault())
    {
        _impl_.message_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.RegisterResponse.message)
}

// -------------------------------------------------------------------

// LoginRequest

// string username = 1;
inline void LoginRequest::clear_username()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.username_.ClearToEmpty();
}
inline const std::string&
LoginRequest::username() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.LoginRequest.username)
    return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_username(Arg_&& arg,
                                                              Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.LoginRequest.username)
}
inline std::string*
LoginRequest::mutable_username() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_username();
    // @@protoc_insertion_point(field_mutable:zpods.LoginRequest.username)
    return _s;
}
inline const std::string& LoginRequest::_internal_username() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.username_.Get();
}
inline void LoginRequest::_internal_set_username(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.username_.Set(value, GetArena());
}
inline std::string* LoginRequest::_internal_mutable_username()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.username_.Mutable(GetArena());
}
inline std::string* LoginRequest::release_username()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.LoginRequest.username)
    return _impl_.username_.Release();
}
inline void LoginRequest::set_allocated_username(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.username_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.username_.IsDefault())
    {
        _impl_.username_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.LoginRequest.username)
}

// string password = 2;
inline void LoginRequest::clear_password()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.password_.ClearToEmpty();
}
inline const std::string&
LoginRequest::password() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.LoginRequest.password)
    return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_password(Arg_&& arg,
                                                              Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.LoginRequest.password)
}
inline std::string*
LoginRequest::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_password();
    // @@protoc_insertion_point(field_mutable:zpods.LoginRequest.password)
    return _s;
}
inline const std::string& LoginRequest::_internal_password() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.password_.Get();
}
inline void LoginRequest::_internal_set_password(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.password_.Set(value, GetArena());
}
inline std::string* LoginRequest::_internal_mutable_password()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.password_.Mutable(GetArena());
}
inline std::string* LoginRequest::release_password()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.LoginRequest.password)
    return _impl_.password_.Release();
}
inline void LoginRequest::set_allocated_password(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.password_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.password_.IsDefault())
    {
        _impl_.password_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.LoginRequest.password)
}

// -------------------------------------------------------------------

// LoginResponse

// bool success = 1;
inline void LoginResponse::clear_success()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.success_ = false;
}
inline bool LoginResponse::success() const
{
    // @@protoc_insertion_point(field_get:zpods.LoginResponse.success)
    return _internal_success();
}
inline void LoginResponse::set_success(bool value)
{
    _internal_set_success(value);
    // @@protoc_insertion_point(field_set:zpods.LoginResponse.success)
}
inline bool LoginResponse::_internal_success() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.success_;
}
inline void LoginResponse::_internal_set_success(bool value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.success_ = value;
}

// string message = 2;
inline void LoginResponse::clear_message()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.message_.ClearToEmpty();
}
inline const std::string&
LoginResponse::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.LoginResponse.message)
    return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse::set_message(Arg_&& arg,
                                                              Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.LoginResponse.message)
}
inline std::string*
LoginResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_message();
    // @@protoc_insertion_point(field_mutable:zpods.LoginResponse.message)
    return _s;
}
inline const std::string& LoginResponse::_internal_message() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.message_.Get();
}
inline void LoginResponse::_internal_set_message(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.message_.Set(value, GetArena());
}
inline std::string* LoginResponse::_internal_mutable_message()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.message_.Mutable(GetArena());
}
inline std::string* LoginResponse::release_message()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.LoginResponse.message)
    return _impl_.message_.Release();
}
inline void LoginResponse::set_allocated_message(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.message_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.message_.IsDefault())
    {
        _impl_.message_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.LoginResponse.message)
}

// string token = 3;
inline void LoginResponse::clear_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.token_.ClearToEmpty();
}
inline const std::string&
LoginResponse::token() const ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    // @@protoc_insertion_point(field_get:zpods.LoginResponse.token)
    return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse::set_token(Arg_&& arg,
                                                            Args_... args)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
    // @@protoc_insertion_point(field_set:zpods.LoginResponse.token)
}
inline std::string* LoginResponse::mutable_token() ABSL_ATTRIBUTE_LIFETIME_BOUND
{
    std::string* _s = _internal_mutable_token();
    // @@protoc_insertion_point(field_mutable:zpods.LoginResponse.token)
    return _s;
}
inline const std::string& LoginResponse::_internal_token() const
{
    PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
    return _impl_.token_.Get();
}
inline void LoginResponse::_internal_set_token(const std::string& value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    _impl_.token_.Set(value, GetArena());
}
inline std::string* LoginResponse::_internal_mutable_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    ;
    return _impl_.token_.Mutable(GetArena());
}
inline std::string* LoginResponse::release_token()
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    // @@protoc_insertion_point(field_release:zpods.LoginResponse.token)
    return _impl_.token_.Release();
}
inline void LoginResponse::set_allocated_token(std::string* value)
{
    PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
    _impl_.token_.SetAllocated(value, GetArena());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    if (_impl_.token_.IsDefault())
    {
        _impl_.token_.Set("", GetArena());
    }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    // @@protoc_insertion_point(field_set_allocated:zpods.LoginResponse.token)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__

// @@protoc_insertion_point(namespace_scope)
} // namespace zpods

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif // GOOGLE_PROTOBUF_INCLUDED_zpods_2eproto_2epb_2eh
