// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: zpods.proto

#include "zpods.pb.h"
#include "zpods.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace zpods {

static const char* PodService_method_names[] = {
  "/zpods.PodService/UploadPod",
  "/zpods.PodService/QueryPods",
  "/zpods.PodService/DownloadPod",
};

std::unique_ptr< PodService::Stub> PodService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PodService::Stub> stub(new PodService::Stub(channel, options));
  return stub;
}

PodService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadPod_(PodService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_QueryPods_(PodService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadPod_(PodService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::zpods::UploadPodRequest>* PodService::Stub::UploadPodRaw(::grpc::ClientContext* context, ::zpods::UploadStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::zpods::UploadPodRequest>::Create(channel_.get(), rpcmethod_UploadPod_, context, response);
}

void PodService::Stub::async::UploadPod(::grpc::ClientContext* context, ::zpods::UploadStatus* response, ::grpc::ClientWriteReactor< ::zpods::UploadPodRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::zpods::UploadPodRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_UploadPod_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::zpods::UploadPodRequest>* PodService::Stub::AsyncUploadPodRaw(::grpc::ClientContext* context, ::zpods::UploadStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::zpods::UploadPodRequest>::Create(channel_.get(), cq, rpcmethod_UploadPod_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::zpods::UploadPodRequest>* PodService::Stub::PrepareAsyncUploadPodRaw(::grpc::ClientContext* context, ::zpods::UploadStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::zpods::UploadPodRequest>::Create(channel_.get(), cq, rpcmethod_UploadPod_, context, response, false, nullptr);
}

::grpc::Status PodService::Stub::QueryPods(::grpc::ClientContext* context, const ::zpods::QueryPodsRequest& request, ::zpods::QueryPodsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zpods::QueryPodsRequest, ::zpods::QueryPodsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QueryPods_, context, request, response);
}

void PodService::Stub::async::QueryPods(::grpc::ClientContext* context, const ::zpods::QueryPodsRequest* request, ::zpods::QueryPodsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zpods::QueryPodsRequest, ::zpods::QueryPodsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryPods_, context, request, response, std::move(f));
}

void PodService::Stub::async::QueryPods(::grpc::ClientContext* context, const ::zpods::QueryPodsRequest* request, ::zpods::QueryPodsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QueryPods_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zpods::QueryPodsResponse>* PodService::Stub::PrepareAsyncQueryPodsRaw(::grpc::ClientContext* context, const ::zpods::QueryPodsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zpods::QueryPodsResponse, ::zpods::QueryPodsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QueryPods_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zpods::QueryPodsResponse>* PodService::Stub::AsyncQueryPodsRaw(::grpc::ClientContext* context, const ::zpods::QueryPodsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryPodsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::zpods::DownloadPodResponse>* PodService::Stub::DownloadPodRaw(::grpc::ClientContext* context, const ::zpods::DownloadPodRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::zpods::DownloadPodResponse>::Create(channel_.get(), rpcmethod_DownloadPod_, context, request);
}

void PodService::Stub::async::DownloadPod(::grpc::ClientContext* context, const ::zpods::DownloadPodRequest* request, ::grpc::ClientReadReactor< ::zpods::DownloadPodResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::zpods::DownloadPodResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadPod_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::zpods::DownloadPodResponse>* PodService::Stub::AsyncDownloadPodRaw(::grpc::ClientContext* context, const ::zpods::DownloadPodRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zpods::DownloadPodResponse>::Create(channel_.get(), cq, rpcmethod_DownloadPod_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::zpods::DownloadPodResponse>* PodService::Stub::PrepareAsyncDownloadPodRaw(::grpc::ClientContext* context, const ::zpods::DownloadPodRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::zpods::DownloadPodResponse>::Create(channel_.get(), cq, rpcmethod_DownloadPod_, context, request, false, nullptr);
}

PodService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PodService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< PodService::Service, ::zpods::UploadPodRequest, ::zpods::UploadStatus>(
          [](PodService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::zpods::UploadPodRequest>* reader,
             ::zpods::UploadStatus* resp) {
               return service->UploadPod(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PodService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PodService::Service, ::zpods::QueryPodsRequest, ::zpods::QueryPodsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PodService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zpods::QueryPodsRequest* req,
             ::zpods::QueryPodsResponse* resp) {
               return service->QueryPods(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PodService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PodService::Service, ::zpods::DownloadPodRequest, ::zpods::DownloadPodResponse>(
          [](PodService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zpods::DownloadPodRequest* req,
             ::grpc::ServerWriter<::zpods::DownloadPodResponse>* writer) {
               return service->DownloadPod(ctx, req, writer);
             }, this)));
}

PodService::Service::~Service() {
}

::grpc::Status PodService::Service::UploadPod(::grpc::ServerContext* context, ::grpc::ServerReader< ::zpods::UploadPodRequest>* reader, ::zpods::UploadStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PodService::Service::QueryPods(::grpc::ServerContext* context, const ::zpods::QueryPodsRequest* request, ::zpods::QueryPodsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PodService::Service::DownloadPod(::grpc::ServerContext* context, const ::zpods::DownloadPodRequest* request, ::grpc::ServerWriter< ::zpods::DownloadPodResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* UserService_method_names[] = {
  "/zpods.UserService/Register",
  "/zpods.UserService/Login",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel, options));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Register_(UserService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(UserService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::Register(::grpc::ClientContext* context, const ::zpods::RegisterRequest& request, ::zpods::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zpods::RegisterRequest, ::zpods::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void UserService::Stub::async::Register(::grpc::ClientContext* context, const ::zpods::RegisterRequest* request, ::zpods::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zpods::RegisterRequest, ::zpods::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void UserService::Stub::async::Register(::grpc::ClientContext* context, const ::zpods::RegisterRequest* request, ::zpods::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zpods::RegisterResponse>* UserService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::zpods::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zpods::RegisterResponse, ::zpods::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zpods::RegisterResponse>* UserService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::zpods::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserService::Stub::Login(::grpc::ClientContext* context, const ::zpods::LoginRequest& request, ::zpods::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::zpods::LoginRequest, ::zpods::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void UserService::Stub::async::Login(::grpc::ClientContext* context, const ::zpods::LoginRequest* request, ::zpods::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::zpods::LoginRequest, ::zpods::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void UserService::Stub::async::Login(::grpc::ClientContext* context, const ::zpods::LoginRequest* request, ::zpods::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::zpods::LoginResponse>* UserService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::zpods::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::zpods::LoginResponse, ::zpods::LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::zpods::LoginResponse>* UserService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::zpods::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::zpods::RegisterRequest, ::zpods::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zpods::RegisterRequest* req,
             ::zpods::RegisterResponse* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::zpods::LoginRequest, ::zpods::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::zpods::LoginRequest* req,
             ::zpods::LoginResponse* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::Register(::grpc::ServerContext* context, const ::zpods::RegisterRequest* request, ::zpods::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::Login(::grpc::ServerContext* context, const ::zpods::LoginRequest* request, ::zpods::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace zpods

